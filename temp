import streamlit as st
from db import init_db, add_task, list_tasks, complete_task
from prioritizer import rank_tasks, gpt_rank
from database.db import init_db, add_task, delete_task, complete_task, list_tasks, update_task_predictions

init_db()
init_db()
st.title("Focus Flow — AI Task Prioritizer (MVP)")

# Sidebar: add task
st.sidebar.header("Add Task")
title = st.sidebar.text_input("Title")
duration = st.sidebar.number_input("Duration (minutes)", min_value=5, max_value=480, value=30)
due = st.sidebar.date_input("Due date (optional)")
importance = st.sidebar.slider("Importance (1-10)", 1, 10, 5)
if st.sidebar.button("Add"):
    add_task(title, duration, due.isoformat() if due else None, importance)
    st.sidebar.success("Added!")

# Current energy
energy = st.slider("How's your energy right now? (1 = low, 10 = high)", 1, 10, 5)

# Load tasks
rows = list_tasks()
tasks = []
for r in rows:
    tasks.append(r)

if not tasks:
    st.info("No tasks. Add one in the sidebar.")
else:
    st.header("Ranked tasks (deterministic)")
    ranked = rank_tasks(tasks, energy)
    for i,(t,s) in enumerate(ranked,1):
        st.subheader(f"{i}. {t['title']}  —  Score: {s:.2f}")
        st.write(f"Duration: {t['duration_minutes']} min | Importance: {t['importance']} | Due: {t['due_date']}")
        if st.button(f"Complete #{t['id']}"):
            complete_task(t['id'])
            st.experimental_rerun()

    st.header("Optional: GPT reasoning (click to generate)")
    if st.button("Ask GPT for reasons"):
        # convert db rows to dicts expected by gpt_rank
        simple_tasks = [{'title': r[1], 'duration_minutes': r[2], 'due_date': r[3], 'importance': r[4]} for r in rows]
        with st.spinner("Talking to GPT..."):
            text = gpt_rank(simple_tasks, energy)
        st.text_area("GPT output", text, height=300)
